GOALS
    Lightweight request/response protocol
    Transport agnostic: bluetooth, UDP
    No heap allocations in C client/server
    Compile-time packet size/buffer overrides
    Basic authentication
    Encryption support
    Client-driven version selection

NON-GOALS
    Session state (intially)
    Detailed Authn/Authz
    Bidirectional communication

Initial implementation
    64-byte packets by default
        4x 16 byte block alignment for encryption
        2 byte: request id
        1 byte: RPC #
        1 byte: Flags (bit field)
            bit 0: request/reply
            bit 1: error
        1 byte: reserved
        2 byte: payload length
        1 byte: CRC8 of header; alignment verification
        bytes 8-63: payload
    Registration call
        Reserved RPC
            initial call and response are tied to protocol version
        rpc #0
        payload is registration config/params
        response
            sucess/fail:
                OK if magic and version check out
                "Unsupported version" if magic checks, but ver does not
                No response if magic fails to disrupt encryption / auth attacks
            capabilities:
                Encryption enabled?
    Security
        Session ID
            *to be time-tracked in later implementations
            Randomly generated
            returned as part of registration
        Resistance to replay attacks?
            embedded environment limits tools such as MAC
        Only care about encrypted packets on network connections?
    CRC polynomial selection
        http://users.ece.cmu.edu/~koopman/roses/dsn04/koopman04_crc_poly_embedded.pdf
        CRC-8 poly: 0xEA, 0x97 0x96*
